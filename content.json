[{"title":"Docker学习笔记（一）","date":"2020-07-30T05:48:26.000Z","path":"2020/07/30/Docker学习笔记（一）/","content":"<h2 id=\"学习路径\"><a href=\"#学习路径\" class=\"headerlink\" title=\"学习路径\"></a>学习路径</h2><ul>\n<li>Docker概述</li>\n<li>Docker安装</li>\n<li>Docker命令<ol>\n<li>镜像命令</li>\n<li>容器命令</li>\n<li>操作命令</li>\n<li>……</li>\n</ol>\n</li>\n<li>Docker镜像</li>\n<li>容器数据卷</li>\n<li>DockerFile</li>\n<li>Docker网络原理</li>\n<li>IDEA整合Docker</li>\n<li>Docker Compose</li>\n<li>Docker Swarm</li>\n<li>CI/CD jenkins</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"Docker概述\"><a href=\"#Docker概述\" class=\"headerlink\" title=\"Docker概述\"></a>Docker概述</h2><p>Docker出现的原因：开发与运维之间的矛盾</p>\n<p>Docker的核心思想：隔离；打包装箱，每个箱子都是相互隔离的</p>\n<h2 id=\"Ubuntu-上-Docker的安装\"><a href=\"#Ubuntu-上-Docker的安装\" class=\"headerlink\" title=\"Ubuntu 上 Docker的安装\"></a>Ubuntu 上 Docker的安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1、卸载旧的版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get remove docker docker-engine docker.io containerd runc</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get update\t<span class=\"comment\"># 更新系统源</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2、安装 apt 依赖包，用于通过 HTTPS 来获取仓库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install \\</span></span><br><span class=\"line\">    apt-transport-https \\</span><br><span class=\"line\">    ca-certificates \\</span><br><span class=\"line\">    curl \\</span><br><span class=\"line\">    gnupg-agent \\</span><br><span class=\"line\">    software-properties-common</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 3、添加 Docker 的官方 GPG 密钥</span></span><br><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-key fingerprint 0EBFCD88\t\t<span class=\"comment\"># 验证密钥是否添加成功</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 4、设置稳定版仓库（使用阿里云镜像）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo add-apt-repository \\</span></span><br><span class=\"line\">   \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu \\</span><br><span class=\"line\">    $(lsb_release -cs) \\</span><br><span class=\"line\">    stable\"</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get update\t<span class=\"comment\"># 更新软件源</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 5、安装最新版的docker-ce（ce：社区版）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install docker-ce docker-ce-cli containerd.io</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 6、启动Docker</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo systemctl start docker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 7、查看Docker是否安装成功</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker version</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 8、hello world</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>验证添加钥匙是否成功</p>\n</blockquote>\n<p><img src=\"/2020/07/30/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20200728135449149.png\" alt=\"image-20200728135449149\"></p>\n<blockquote>\n<p>查看Docker是否安装成功</p>\n</blockquote>\n<p><img src=\"/2020/07/30/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20200728140917943.png\" alt=\"image-20200728140917943\"></p>\n<blockquote>\n<p>测试Docker里的镜像 hello-world</p>\n</blockquote>\n<p><img src=\"/2020/07/30/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20200728140715233.png\" alt=\"image-20200728140715233\"></p>\n<h2 id=\"Dockerd的卸载\"><a href=\"#Dockerd的卸载\" class=\"headerlink\" title=\"Dockerd的卸载\"></a>Dockerd的卸载</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 1、卸载依赖</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get purge docker-ce docker-ce-cli containerd.io</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 2、删除资源</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo rm -rf /var/lib/docker\t<span class=\"comment\"># /var/lib/docker：docker的默认工作路径</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"底层原理\"><a href=\"#底层原理\" class=\"headerlink\" title=\"底层原理\"></a>底层原理</h2><p><strong>Docker是怎么工作的？</strong></p>\n<ul>\n<li><p>Docker 是一个 Client-Server 结构的系统，Docker 的守护进程运行在主机上，通过Socket从客户端访问！</p>\n</li>\n<li><p>DockerServer 接收到 Docker-Client 的指令，就会执行这个命令！</p>\n</li>\n</ul>\n<p><strong>Docker为什么比VM快</strong></p>\n<ul>\n<li>Docker 有着比虚拟机更少的抽象层</li>\n<li>Docker利用的是宿主机的内核，VM需要的是Guest OS</li>\n</ul>\n<blockquote>\n<p>所以说，新建一个容器的时候，Docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导操作。虚拟机是加载 Guest OS，分钟级别，而Docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级！</p>\n</blockquote>\n<h2 id=\"Docker的常用命令\"><a href=\"#Docker的常用命令\" class=\"headerlink\" title=\"Docker的常用命令\"></a>Docker的常用命令</h2><h3 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a>帮助命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker version\t\t<span class=\"comment\"># 显示docker的版本信息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker info\t\t\t<span class=\"comment\"># 显示docker的系统信息，包括镜像和容器的数量</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker 命令 --<span class=\"built_in\">help</span>\t   <span class=\"comment\"># 帮助命令</span></span></span><br></pre></td></tr></table></figure>\n\n<p>###　镜像命令</p>\n<blockquote>\n<p><strong>$ docker images        # 查看所有本地的主机上的镜像</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker images\t\t<span class=\"comment\"># 查看所有本地的主机上的镜像</span></span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~/Desktop$ sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">hello-world         latest              bf756fb1ae65        6 months ago        13.3kB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解释</span></span><br><span class=\"line\">REPOSITORY\t镜像的仓库源</span><br><span class=\"line\">TAG\t\t\t镜像的标签</span><br><span class=\"line\">IMAGE ID\t镜像的id</span><br><span class=\"line\">CREATED\t\t镜像的创建时间</span><br><span class=\"line\">SIZE\t\t镜像的大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可选项</span></span><br><span class=\"line\">-a，-all\t\t# 列出所有镜像</span><br><span class=\"line\">-q，-quiet\t# 只显示镜像的id</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>$ docker search        # 搜索镜像</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yfaqh@yfaqh-virtual-machine:~/Desktop$ sudo docker search mysql</span><br><span class=\"line\">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">mysql                             MySQL is a widely used, open-source relation…   9771                [OK]                </span><br><span class=\"line\">mariadb                           MariaDB is a community-developed fork of MyS…   3566                [OK]                </span><br><span class=\"line\">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   717                                     [OK]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可选项,通过搜索来过滤</span></span><br><span class=\"line\">--filter=STARS=3000\t\t# 搜索出来的镜像就是STARS大于3000的</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>docker pull 镜像名[:tag]                # 下载镜像</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker pull mysql\t\t<span class=\"comment\"># 如果不写tag，默认就是latest，即最新版本</span></span></span><br><span class=\"line\">Digest: ……\t\t\t\t# 签名（防伪标志）</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker采用的分层下载，docker images的核心，联合文件系统</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>docker rmi                # 删除镜像</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker rmi -f 镜像id\t\t\t\t   <span class=\"comment\"># 删除指定的镜像</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker rmi -f 镜像id 镜像id 镜像id\t\t<span class=\"comment\"># 删除多个镜像</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker rmi -f $(docker images -aq)\t<span class=\"comment\"># 删除全部的镜像</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h3><blockquote>\n<p>说明：有了镜像才可以创建容器，Linux，下载一个CentOS镜像进行测试</p>\n<p>docker pull centos</p>\n</blockquote>\n<blockquote>\n<p><strong>新建容器并启动</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker run [可选参数] images</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 参数说明</span></span><br><span class=\"line\">--name=\"Name\"\t\t容器名字 tomcat01，tomcat02 用来区分容器</span><br><span class=\"line\">-d\t\t\t\t\t后台方式运行</span><br><span class=\"line\">-it\t\t\t\t\t使用交互方式运行，进入容器来查看内容</span><br><span class=\"line\">-p\t\t\t\t\t指定容器的端口 -p 8080:8080</span><br><span class=\"line\">\t-p ip:主机端口：容器端口</span><br><span class=\"line\">\t-p 主机端口:容器端口（常用）</span><br><span class=\"line\">\t-p 容器端口</span><br><span class=\"line\">\t容器端口</span><br><span class=\"line\">-P\t\t\t\t\t随机指定端口</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试，启动并进入容器</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~/Desktop$ sudo docker run -it centos /bin/bash</span><br><span class=\"line\">[root@260e898eece3 /]# ls\t\t# 查看容器内的centos，基础版本，很多命令都是不完善的</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>列出所有运行的容器</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker ps</span></span><br><span class=\"line\">空  \t   # 列出当前正在运行的容器</span><br><span class=\"line\">-a\t\t# 列出当前正在运行的容器 + 曾经运行过的容器</span><br><span class=\"line\">-n=?\t# 显示最近创建的容器</span><br><span class=\"line\">-q\t\t# 只显示容器的编号</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>退出容器</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">exit</span>\t\t\t<span class=\"comment\"># 直接容器停止并退出</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> Ctrl + P + Q\t<span class=\"comment\"># 容器不停止并退出</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>删除容器</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> dockers rm 容器id\t\t\t\t   <span class=\"comment\"># 删除指定容器,不能删除正在运行的容器,如果要强制删除,用rm -f</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker rm -f $(docker ps -aq)\t<span class=\"comment\"># 删除所有容器</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker ps -a -q|xargs docker rm <span class=\"comment\"># 删除所有的容器</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <strong>启动和停止容器的操作</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker start 容器id\t\t<span class=\"comment\"># 启动容器</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker restart 容器id\t<span class=\"comment\"># 重启容器</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker stop 容器id\t\t<span class=\"comment\"># 停止当前正在运行的容器</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker <span class=\"built_in\">kill</span> 容器id\t\t<span class=\"comment\"># 强制停止当前容器</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用其他命令\"><a href=\"#常用其他命令\" class=\"headerlink\" title=\"常用其他命令\"></a>常用其他命令</h3><blockquote>\n<p><strong>后台启动容器</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令 docker run -d 镜像名</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker run -d centos</span><br><span class=\"line\">d2c7330db4da53ede0909f81a5d433edb140eb384b960e014d1c1c2487e7d1ae</span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 问题:docker ps,发现centos停止了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 常见的坑: docker容器使用后台运行, 就必须要有一个前台进程, docker发现没有应用, 就会自动停止</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nginx: 容器启动后, 发现自己没有提供服务, 就会立刻停止, 就是没有程序了</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>查看日志</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker logs -t -f --tail 容器\t\t<span class=\"comment\"># 没有日志</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 自己编写一个shell脚本</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker run -d centos /bin/sh -c \"while true;do echo yanghang;sleep 1;done\"</span><br><span class=\"line\">7a3c8d163f656bbf037df6743024f2bc5dd7f396d63ee41d18943476dafb55f5</span><br><span class=\"line\"></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE</span><br><span class=\"line\">7a3c8d163f65        centos</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示日志</span></span><br><span class=\"line\">-tf\t\t\t\t\t# 显示日志</span><br><span class=\"line\">--tail number\t\t# 要显示日志条数</span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker logs -t -f --tail 10 7a3c8d163f65</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>查看容器中的进程信息</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> docker top 容器id</span></span><br><span class=\"line\"></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker top 7a3c8d163f65 </span><br><span class=\"line\">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class=\"line\">root                108811              108783              0                   22:02               ?                   00:00:00            /bin/sh -c while true;do echo yanghang;sleep 1;done</span><br><span class=\"line\">root                110494              108811              0                   22:19               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>查看镜像的元数据</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker inspect 容器id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE</span><br><span class=\"line\">7a3c8d163f65        centos</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker inspect 7a3c8d163f65</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>进入当前正在运行的容器</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通常,容器都是使用后台方式运行的,需要进入容器,修改一些配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方式一</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker <span class=\"built_in\">exec</span> -it 容器id bashShell</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">7a3c8d163f65        centos              \"/bin/sh -c 'while t…\"   32 minutes ago      Up 32 minutes                           upbeat_rosalind</span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker exec -it 7a3c8d163f65 /bin/bash</span><br><span class=\"line\">[root@7a3c8d163f65 /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">[root@7a3c8d163f65 /]# ps -ef</span><br><span class=\"line\">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root          1      0  0 14:02 ?        00:00:01 /bin/sh -c while true;do echo yanghang;sleep 1;done</span><br><span class=\"line\">root       2009      0  0 14:36 pts/0    00:00:00 /bin/bash</span><br><span class=\"line\">root       2111      1  0 14:37 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class=\"line\">root       2112   2009  0 14:37 pts/0    00:00:00 ps -ef</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方式二</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker attach 容器id</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker attach 7a3c8d163f65</span><br><span class=\"line\">正在执行当前代码...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker <span class=\"built_in\">exec</span>\t\t<span class=\"comment\"># 进入容器后开启一个新的终端, 可以在里面操作(常用)</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker attach\t\t<span class=\"comment\"># 进入容器后正在执行的终端,不会创建新的容器</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>从容器内拷贝文件到主机上</strong></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">　命令</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker cp 容器id:容器内路径\t\t目的的主机路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前主机目录下</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker run -it centos /bin/bash</span><br><span class=\"line\">[root@31b854d6fc27 /]# yfaqh@yfaqh-virtual-machine:~$ sudo docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">31b854d6fc27        centos              \"/bin/bash\"         11 seconds ago      Up 10 seconds                           determined_blackwell</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入docker容器内部</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker attach 31b854d6fc27</span><br><span class=\"line\">[root@31b854d6fc27 /]# pwd   </span><br><span class=\"line\">/</span><br><span class=\"line\">[root@31b854d6fc27 /]# ls</span><br><span class=\"line\">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class=\"line\">[root@31b854d6fc27 /]# cd /home</span><br><span class=\"line\">[root@31b854d6fc27 home]# ls</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 在容器内新建一个文件</span></span><br><span class=\"line\">[root@31b854d6fc27 home]# touch test.java</span><br><span class=\"line\">[root@31b854d6fc27 home]# ls</span><br><span class=\"line\">test.java</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将新建的文件拷贝到主机上</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ sudo docker cp 31b854d6fc27:/home/test.java /home/yfaqh/Desktop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 验证是否拷贝成功</span></span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ pwd</span><br><span class=\"line\">/home/yfaqh</span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~$ cd /home/yfaqh/Desktop</span><br><span class=\"line\">yfaqh@yfaqh-virtual-machine:~/Desktop$ ls</span><br><span class=\"line\">test.java  test_shell.sh  test.txt  tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拷贝是一个手动过程, 未来使用-v卷的技术, 可以实现</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>","tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]},{"title":"我在Hexo上的第一篇博客","date":"2020-07-05T13:23:35.000Z","path":"2020/07/05/我在Hexo上的第一篇博客/","content":"<hr>\n<p>今天家里下了很大的雨，雨下了很久，久久不停的雨让心绪无法平静下来……</p>\n<p>也就是在今天，在<a href=\"https://space.bilibili.com/384068749\" target=\"_blank\" rel=\"noopener\">羊哥</a>的帮助下，我正是拥有了自己的个人博客站。虽说是一个静态的，托管在GitHub上的一个个人博客。但是这只是开始，未来有精力的话会开发一个属于正在属于自己的博客站。</p>\n<p>除了自己的学习心得和经验分享以外，这里将会是我突发奇想或者惆怅时随笔的归处。</p>\n<p>这个个人小站基本的功能都已具备，在未来的日子里我会继续完善这个个人站的功能，一起期待吧^_^</p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Hello World","date":"2020-07-05T13:09:11.478Z","path":"2020/07/05/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","tags":[]}]